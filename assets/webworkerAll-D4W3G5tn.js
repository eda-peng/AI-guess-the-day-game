import{E as m,U as ht,T as pe,a as ft,a1 as H,a2 as D,u as R,_ as M,M as F,aa as pt,ab as gt,w as I,ac as se,ad as z,Q as ie,ae as mt,af as W,ag as U,l as E,c as Ue,I as k,P as xt,a4 as ke,R as oe,H as Ae,ah as _t,z as v,ai as bt,aj as de,L as ne,ak as $,b as ge,B as j,t as le,v as yt,G as Tt,al as vt,am as wt,m as Ge,q as ze,a5 as He,a8 as De,an as Oe,s as St,o as Ct,p as Bt,a6 as Pt,a7 as Rt,a9 as Mt,ao as Ft,ap as Ut,D as Ie,n as me,e as S,aq as kt}from"./index-CgykyG3q.js";import{S as X,c as Q,a as At,b as Gt,B as We}from"./colorToUniform-C2GHuDhf.js";import{C as O}from"./CanvasPool-IxIXiV6h.js";class Ee{static init(e){Object.defineProperty(this,"resizeTo",{set(t){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=t,t&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame(()=>this.resize()))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;this._cancelResize();let t,r;if(this._resizeTo===globalThis.window)t=globalThis.innerWidth,r=globalThis.innerHeight;else{const{clientWidth:s,clientHeight:i}=this._resizeTo;t=s,r=i}this.renderer.resize(t,r),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}Ee.extension=m.Application;class Le{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(t){this._ticker&&this._ticker.remove(this.render,this),this._ticker=t,t&&t.add(this.render,this,ht.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?pe.shared:new pe,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}Le.extension=m.Application;class zt extends ft{constructor(){super(...arguments),this.chars=Object.create(null),this.lineHeight=0,this.fontFamily="",this.fontMetrics={fontSize:0,ascent:0,descent:0},this.baseLineOffset=0,this.distanceField={type:"none",range:0},this.pages=[],this.applyFillAsTint=!0,this.baseMeasurementFontSize=100,this.baseRenderedFontSize=100}get font(){return H(D,"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead."),this.fontFamily}get pageTextures(){return H(D,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}get size(){return H(D,"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead."),this.fontMetrics.fontSize}get distanceFieldRange(){return H(D,"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead."),this.distanceField.range}get distanceFieldType(){return H(D,"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead."),this.distanceField.type}destroy(e=!1){var t;this.emit("destroy",this),this.removeAllListeners();for(const r in this.chars)(t=this.chars[r].texture)==null||t.destroy();this.chars=null,e&&(this.pages.forEach(r=>r.texture.destroy(!0)),this.pages=null)}}const xe=1e5;function q(n,e,t,r=0){if(n.texture===R.WHITE&&!n.fill)return M.shared.setValue(n.color).setAlpha(n.alpha??1).toHexa();if(n.fill){if(n.fill instanceof pt){const s=n.fill,i=e.createPattern(s.texture.source.resource,"repeat"),a=s.transform.copyTo(F.shared);return a.scale(s.texture.frame.width,s.texture.frame.height),i.setTransform(a),i}else if(n.fill instanceof gt){const s=n.fill,i=s.type==="linear",a=s.textureSpace==="local";let o=1,d=1;a&&t&&(o=t.width+r,d=t.height+r);let u,c=!1;if(i){const{start:l,end:f}=s;u=e.createLinearGradient(l.x*o,l.y*d,f.x*o,f.y*d),c=Math.abs(f.x-l.x)<Math.abs((f.y-l.y)*.1)}else{const{center:l,innerRadius:f,outerCenter:g,outerRadius:p}=s;u=e.createRadialGradient(l.x*o,l.y*d,f*o,g.x*o,g.y*d,p*o)}if(c&&a&&t){const l=t.lineHeight/d;for(let f=0;f<t.lines.length;f++){const g=(f*t.lineHeight+r/2)/d;s.colorStops.forEach(p=>{const h=g+p.offset*l;u.addColorStop(Math.floor(h*xe)/xe,M.shared.setValue(p.color).toHex())})}}else s.colorStops.forEach(l=>{u.addColorStop(l.offset,M.shared.setValue(l.color).toHex())});return u}}else{const s=e.createPattern(n.texture.source.resource,"repeat"),i=n.matrix.copyTo(F.shared);return i.scale(n.texture.frame.width,n.texture.frame.height),s.setTransform(i),s}return I("FillStyle not recognised",n),"red"}function Ve(n){if(n==="")return[];typeof n=="string"&&(n=[n]);const e=[];for(let t=0,r=n.length;t<r;t++){const s=n[t];if(Array.isArray(s)){if(s.length!==2)throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${s.length}.`);if(s[0].length===0||s[1].length===0)throw new Error("[BitmapFont]: Invalid character delimiter.");const i=s[0].charCodeAt(0),a=s[1].charCodeAt(0);if(a<i)throw new Error("[BitmapFont]: Invalid character range.");for(let o=i,d=a;o<=d;o++)e.push(String.fromCharCode(o))}else e.push(...Array.from(s))}if(e.length===0)throw new Error("[BitmapFont]: Empty set when resolving characters.");return e}const $e=class je extends zt{constructor(e){super(),this.resolution=1,this.pages=[],this._padding=0,this._measureCache=Object.create(null),this._currentChars=[],this._currentX=0,this._currentY=0,this._currentPageIndex=-1,this._skipKerning=!1;const t={...je.defaultOptions,...e};this._textureSize=t.textureSize,this._mipmap=t.mipmap;const r=t.style.clone();t.overrideFill&&(r._fill.color=16777215,r._fill.alpha=1,r._fill.texture=R.WHITE,r._fill.fill=null),this.applyFillAsTint=t.overrideFill;const s=r.fontSize;r.fontSize=this.baseMeasurementFontSize;const i=se(r);t.overrideSize?r._stroke&&(r._stroke.width*=this.baseRenderedFontSize/s):r.fontSize=this.baseRenderedFontSize=s,this._style=r,this._skipKerning=t.skipKerning??!1,this.resolution=t.resolution??1,this._padding=t.padding??4,this.fontMetrics=z.measureFont(i),this.lineHeight=r.lineHeight||this.fontMetrics.fontSize||r.fontSize}ensureCharacters(e){var x,_;const t=Ve(e).filter(w=>!this._currentChars.includes(w)).filter((w,b,y)=>y.indexOf(w)===b);if(!t.length)return;this._currentChars=[...this._currentChars,...t];let r;this._currentPageIndex===-1?r=this._nextPage():r=this.pages[this._currentPageIndex];let{canvas:s,context:i}=r.canvasAndContext,a=r.texture.source;const o=this._style;let d=this._currentX,u=this._currentY;const c=this.baseRenderedFontSize/this.baseMeasurementFontSize,l=this._padding*c;let f=0,g=!1;const p=s.width/this.resolution,h=s.height/this.resolution;for(let w=0;w<t.length;w++){const b=t[w],y=z.measureText(b,o,s,!1);y.lineHeight=y.height;const B=y.width*c,C=Math.ceil((o.fontStyle==="italic"?2:1)*B),A=y.height*c,P=C+l*2,L=A+l*2;if(g=!1,b!==`
`&&b!=="\r"&&b!=="	"&&b!==" "&&(g=!0,f=Math.ceil(Math.max(L,f))),d+P>p&&(u+=f,f=L,d=0,u+f>h)){a.update();const G=this._nextPage();s=G.canvasAndContext.canvas,i=G.canvasAndContext.context,a=G.texture.source,u=0}const V=B/c-(((x=o.dropShadow)==null?void 0:x.distance)??0)-(((_=o._stroke)==null?void 0:_.width)??0);if(this.chars[b]={id:b.codePointAt(0),xOffset:-this._padding,yOffset:-this._padding,xAdvance:V,kerning:{}},g){this._drawGlyph(i,y,d+l,u+l,c,o);const G=a.width*c,T=a.height*c,J=new ie(d/G*a.width,u/T*a.height,P/G*a.width,L/T*a.height);this.chars[b].texture=new R({source:a,frame:J}),d+=Math.ceil(P)}}a.update(),this._currentX=d,this._currentY=u,this._skipKerning&&this._applyKerning(t,i)}get pageTextures(){return H(D,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}_applyKerning(e,t){const r=this._measureCache;for(let s=0;s<e.length;s++){const i=e[s];for(let a=0;a<this._currentChars.length;a++){const o=this._currentChars[a];let d=r[i];d||(d=r[i]=t.measureText(i).width);let u=r[o];u||(u=r[o]=t.measureText(o).width);let c=t.measureText(i+o).width,l=c-(d+u);l&&(this.chars[i].kerning[o]=l),c=t.measureText(i+o).width,l=c-(d+u),l&&(this.chars[o].kerning[i]=l)}}}_nextPage(){this._currentPageIndex++;const e=this.resolution,t=O.getOptimalCanvasAndContext(this._textureSize,this._textureSize,e);this._setupContext(t.context,this._style,e);const r=e*(this.baseRenderedFontSize/this.baseMeasurementFontSize),s=new R({source:new mt({resource:t.canvas,resolution:r,alphaMode:"premultiply-alpha-on-upload",autoGenerateMipmaps:this._mipmap})}),i={canvasAndContext:t,texture:s};return this.pages[this._currentPageIndex]=i,i}_setupContext(e,t,r){t.fontSize=this.baseRenderedFontSize,e.scale(r,r),e.font=se(t),t.fontSize=this.baseMeasurementFontSize,e.textBaseline=t.textBaseline;const s=t._stroke,i=(s==null?void 0:s.width)??0;if(s&&(e.lineWidth=i,e.lineJoin=s.join,e.miterLimit=s.miterLimit,e.strokeStyle=q(s,e)),t._fill&&(e.fillStyle=q(t._fill,e)),t.dropShadow){const a=t.dropShadow,o=M.shared.setValue(a.color).toArray(),d=a.blur*r,u=a.distance*r;e.shadowColor=`rgba(${o[0]*255},${o[1]*255},${o[2]*255},${a.alpha})`,e.shadowBlur=d,e.shadowOffsetX=Math.cos(a.angle)*u,e.shadowOffsetY=Math.sin(a.angle)*u}else e.shadowColor="black",e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0}_drawGlyph(e,t,r,s,i,a){const o=t.text,d=t.fontProperties,u=a._stroke,c=((u==null?void 0:u.width)??0)*i,l=r+c/2,f=s-c/2,g=d.descent*i,p=t.lineHeight*i;a.stroke&&c&&e.strokeText(o,l,f+p-g),a._fill&&e.fillText(o,l,f+p-g)}destroy(){super.destroy();for(let e=0;e<this.pages.length;e++){const{canvasAndContext:t,texture:r}=this.pages[e];O.returnCanvasAndContext(t),r.destroy(!0)}this.pages=null}};$e.defaultOptions={textureSize:512,style:new W,mipmap:!0};let _e=$e;function Ke(n,e,t,r){const s={width:0,height:0,offsetY:0,scale:e.fontSize/t.baseMeasurementFontSize,lines:[{width:0,charPositions:[],spaceWidth:0,spacesIndex:[],chars:[]}]};s.offsetY=t.baseLineOffset;let i=s.lines[0],a=null,o=!0;const d={width:0,start:0,index:0,positions:[],chars:[]},u=p=>{const h=i.width;for(let x=0;x<d.index;x++){const _=p.positions[x];i.chars.push(p.chars[x]),i.charPositions.push(_+h)}i.width+=p.width,o=!1,d.width=0,d.index=0,d.chars.length=0},c=()=>{let p=i.chars.length-1;if(r){let h=i.chars[p];for(;h===" ";)i.width-=t.chars[h].xAdvance,h=i.chars[--p]}s.width=Math.max(s.width,i.width),i={width:0,charPositions:[],chars:[],spaceWidth:0,spacesIndex:[]},o=!0,s.lines.push(i),s.height+=t.lineHeight},l=t.baseMeasurementFontSize/e.fontSize,f=e.letterSpacing*l,g=e.wordWrapWidth*l;for(let p=0;p<n.length+1;p++){let h;const x=p===n.length;x||(h=n[p]);const _=t.chars[h]||t.chars[" "];if(/(?:\s)/.test(h)||h==="\r"||h===`
`||x){if(!o&&e.wordWrap&&i.width+d.width-f>g?(c(),u(d),x||i.charPositions.push(0)):(d.start=i.width,u(d),x||i.charPositions.push(0)),h==="\r"||h===`
`)i.width!==0&&c();else if(!x){const B=_.xAdvance+(_.kerning[a]||0)+f;i.width+=B,i.spaceWidth=B,i.spacesIndex.push(i.charPositions.length),i.chars.push(h)}}else{const y=_.kerning[a]||0,B=_.xAdvance+y+f;d.positions[d.index++]=d.width+y,d.chars.push(h),d.width+=B}a=h}return c(),e.align==="center"?Ht(s):e.align==="right"?Dt(s):e.align==="justify"&&Ot(s),s}function Ht(n){for(let e=0;e<n.lines.length;e++){const t=n.lines[e],r=n.width/2-t.width/2;for(let s=0;s<t.charPositions.length;s++)t.charPositions[s]+=r}}function Dt(n){for(let e=0;e<n.lines.length;e++){const t=n.lines[e],r=n.width-t.width;for(let s=0;s<t.charPositions.length;s++)t.charPositions[s]+=r}}function Ot(n){const e=n.width;for(let t=0;t<n.lines.length;t++){const r=n.lines[t];let s=0,i=r.spacesIndex[s++],a=0;const o=r.spacesIndex.length,u=(e-r.width)/o;for(let c=0;c<r.charPositions.length;c++)c===i&&(i=r.spacesIndex[s++],a+=u),r.charPositions[c]+=a}}let K=0;class It{constructor(){this.ALPHA=[["a","z"],["A","Z"]," "],this.NUMERIC=[["0","9"]],this.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],this.ASCII=[[" ","~"]],this.defaultOptions={chars:this.ALPHANUMERIC,resolution:1,padding:4,skipKerning:!1}}getFont(e,t){var a;let r=`${t.fontFamily}-bitmap`,s=!0;if(t._fill.fill&&!t._stroke)r+=t._fill.fill.styleKey,s=!1;else if(t._stroke||t.dropShadow){let o=t.styleKey;o=o.substring(0,o.lastIndexOf("-")),r=`${o}-bitmap`,s=!1}if(!U.has(r)){const o=new _e({style:t,overrideFill:s,overrideSize:!0,...this.defaultOptions});K++,K>50&&I("BitmapText",`You have dynamically created ${K} bitmap fonts, this can be inefficient. Try pre installing your font styles using \`BitmapFont.install({name:"style1", style})\``),o.once("destroy",()=>{K--,U.remove(r)}),U.set(r,o)}const i=U.get(r);return(a=i.ensureCharacters)==null||a.call(i,e),i}getLayout(e,t,r=!0){const s=this.getFont(e,t);return Ke([...e],t,s,r)}measureText(e,t,r=!0){return this.getLayout(e,t,r)}install(...e){var u,c,l,f;let t=e[0];typeof t=="string"&&(t={name:t,style:e[1],chars:(u=e[2])==null?void 0:u.chars,resolution:(c=e[2])==null?void 0:c.resolution,padding:(l=e[2])==null?void 0:l.padding,skipKerning:(f=e[2])==null?void 0:f.skipKerning},H(D,"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})"));const r=t==null?void 0:t.name;if(!r)throw new Error("[BitmapFontManager] Property `name` is required.");t={...this.defaultOptions,...t};const s=t.style,i=s instanceof W?s:new W(s),a=i._fill.fill!==null&&i._fill.fill!==void 0,o=new _e({style:i,overrideFill:a,skipKerning:t.skipKerning,padding:t.padding,resolution:t.resolution,overrideSize:!1}),d=Ve(t.chars);return o.ensureCharacters(d.join("")),U.set(`${r}-bitmap`,o),o.once("destroy",()=>U.remove(`${r}-bitmap`)),o}uninstall(e){const t=`${e}-bitmap`,r=U.get(t);r&&r.destroy()}}const Wt=new It;class Ye{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){e.action==="pushFilter"?this._renderer.filter.push(e):e.action==="popFilter"&&this._renderer.filter.pop()}destroy(){this._renderer=null}}Ye.extension={type:[m.WebGLPipes,m.WebGPUPipes,m.CanvasPipes],name:"filter"};function Et(n,e){e.clear();const t=e.matrix;for(let r=0;r<n.length;r++){const s=n[r];s.globalDisplayStatus<7||(e.matrix=s.worldTransform,e.addBounds(s.bounds))}return e.matrix=t,e}const Lt=new ke({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:2*4,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class Ne{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new E({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new Ue({}),this.renderer=e}get activeBackTexture(){var e;return(e=this._activeFilterData)==null?void 0:e.backTexture}push(e){var g;const t=this.renderer,r=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const s=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,r.length===0){s.skip=!0;return}const i=s.bounds;if(e.renderables?Et(e.renderables,i):e.filterEffect.filterArea?(i.clear(),i.addRect(e.filterEffect.filterArea),i.applyMatrix(e.container.worldTransform)):e.container.getFastGlobalBounds(!0,i),e.container){const h=(e.container.renderGroup||e.container.parentRenderGroup).cacheToLocalTransform;h&&i.applyMatrix(h)}const a=t.renderTarget.renderTarget.colorTexture.source;let o=1/0,d=0,u=!0,c=!1,l=!1,f=!0;for(let p=0;p<r.length;p++){const h=r[p];if(o=Math.min(o,h.resolution==="inherit"?a._resolution:h.resolution),d+=h.padding,h.antialias==="off"?u=!1:h.antialias==="inherit"&&u&&(u=a.antialias),h.clipToViewport||(f=!1),!!!(h.compatibleRenderers&t.type)){l=!1;break}if(h.blendRequired&&!(((g=t.backBuffer)==null?void 0:g.useBackBuffer)??!0)){I("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),l=!1;break}l=h.enabled||l,c||(c=h.blendRequired)}if(!l){s.skip=!0;return}if(f){const p=t.renderTarget.rootViewPort,h=t.renderTarget.renderTarget.resolution;i.fitBounds(0,p.width/h,0,p.height/h)}if(i.scale(o).ceil().scale(1/o).pad(d|0),!i.isPositive){s.skip=!0;return}s.skip=!1,s.bounds=i,s.blendRequired=c,s.container=e.container,s.filterEffect=e.filterEffect,s.previousRenderSurface=t.renderTarget.renderSurface,s.inputTexture=k.getOptimalTexture(i.width,i.height,o,u),t.renderTarget.bind(s.inputTexture,!0),t.globalUniforms.push({offset:i})}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const r=t.inputTexture,s=t.bounds;let i=R.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const o=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,d=e.renderTarget.getRenderTarget(t.previousRenderSurface);i=this.getBackTexture(d,s,o)}t.backTexture=i;const a=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(i.source,3),e.globalUniforms.pop(),a.length===1)a[0].apply(this,r,t.previousRenderSurface,!1),k.returnTexture(r);else{let o=t.inputTexture,d=k.getOptimalTexture(s.width,s.height,o.source._resolution,!1),u=0;for(u=0;u<a.length-1;++u){a[u].apply(this,o,d,!0);const l=o;o=d,d=l}a[u].apply(this,o,t.previousRenderSurface,!1),k.returnTexture(o),k.returnTexture(d)}t.blendRequired&&k.returnTexture(i)}getBackTexture(e,t,r){const s=e.colorTexture.source._resolution,i=k.getOptimalTexture(t.width,t.height,s,!1);let a=t.minX,o=t.minY;r&&(a-=r.minX,o-=r.minY),a=Math.floor(a*s),o=Math.floor(o*s);const d=Math.ceil(t.width*s),u=Math.ceil(t.height*s);return this.renderer.renderTarget.copyToTexture(e,i,{x:a,y:o},{width:d,height:u},{x:0,y:0}),i}applyFilter(e,t,r,s){const i=this.renderer,a=this._filterStack[this._filterStackIndex],o=a.bounds,d=xt.shared,c=a.previousRenderSurface===r;let l=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,f=this._filterStackIndex-1;for(;f>0&&this._filterStack[f].skip;)--f;f>0&&(l=this._filterStack[f].inputTexture.source._resolution);const g=this._filterGlobalUniforms,p=g.uniforms,h=p.uOutputFrame,x=p.uInputSize,_=p.uInputPixel,w=p.uInputClamp,b=p.uGlobalFrame,y=p.uOutputTexture;if(c){let A=this._filterStackIndex;for(;A>0;){A--;const P=this._filterStack[this._filterStackIndex-1];if(!P.skip){d.x=P.bounds.minX,d.y=P.bounds.minY;break}}h[0]=o.minX-d.x,h[1]=o.minY-d.y}else h[0]=0,h[1]=0;h[2]=t.frame.width,h[3]=t.frame.height,x[0]=t.source.width,x[1]=t.source.height,x[2]=1/x[0],x[3]=1/x[1],_[0]=t.source.pixelWidth,_[1]=t.source.pixelHeight,_[2]=1/_[0],_[3]=1/_[1],w[0]=.5*_[2],w[1]=.5*_[3],w[2]=t.frame.width*x[2]-.5*_[2],w[3]=t.frame.height*x[3]-.5*_[3];const B=this.renderer.renderTarget.rootRenderTarget.colorTexture;b[0]=d.x*l,b[1]=d.y*l,b[2]=B.source.width*l,b[3]=B.source.height*l;const C=this.renderer.renderTarget.getRenderTarget(r);if(i.renderTarget.bind(r,!!s),r instanceof R?(y[0]=r.frame.width,y[1]=r.frame.height):(y[0]=C.width,y[1]=C.height),y[2]=C.isRoot?-1:1,g.update(),i.renderPipes.uniformBatch){const A=i.renderPipes.uniformBatch.getUboResource(g);this._globalFilterBindGroup.setResource(A,0)}else this._globalFilterBindGroup.setResource(g,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,i.encoder.draw({geometry:Lt,shader:e,state:e._state,topology:"triangle-list"}),i.type===oe.WEBGL&&i.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new Ae,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const r=this._activeFilterData,s=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),i=t.worldTransform.copyTo(F.shared),a=t.renderGroup||t.parentRenderGroup;return a&&a.cacheToLocalTransform&&i.prepend(a.cacheToLocalTransform),i.invert(),s.prepend(i),s.scale(1/t.texture.frame.width,1/t.texture.frame.height),s.translate(t.anchor.x,t.anchor.y),s}}Ne.extension={type:[m.WebGLSystem,m.WebGPUSystem],name:"filter"};function Vt(n){const e=n._stroke,t=n._fill,s=[`div { ${[`color: ${M.shared.setValue(t.color).toHex()}`,`font-size: ${n.fontSize}px`,`font-family: ${n.fontFamily}`,`font-weight: ${n.fontWeight}`,`font-style: ${n.fontStyle}`,`font-variant: ${n.fontVariant}`,`letter-spacing: ${n.letterSpacing}px`,`text-align: ${n.align}`,`padding: ${n.padding}px`,`white-space: ${n.whiteSpace==="pre"&&n.wordWrap?"pre-wrap":n.whiteSpace}`,...n.lineHeight?[`line-height: ${n.lineHeight}px`]:[],...n.wordWrap?[`word-wrap: ${n.breakWords?"break-all":"break-word"}`,`max-width: ${n.wordWrapWidth}px`]:[],...e?[qe(e)]:[],...n.dropShadow?[Xe(n.dropShadow)]:[],...n.cssOverrides].join(";")} }`];return $t(n.tagStyles,s),s.join(" ")}function Xe(n){const e=M.shared.setValue(n.color).setAlpha(n.alpha).toHexa(),t=Math.round(Math.cos(n.angle)*n.distance),r=Math.round(Math.sin(n.angle)*n.distance),s=`${t}px ${r}px`;return n.blur>0?`text-shadow: ${s} ${n.blur}px ${e}`:`text-shadow: ${s} ${e}`}function qe(n){return[`-webkit-text-stroke-width: ${n.width}px`,`-webkit-text-stroke-color: ${M.shared.setValue(n.color).toHex()}`,`text-stroke-width: ${n.width}px`,`text-stroke-color: ${M.shared.setValue(n.color).toHex()}`,"paint-order: stroke"].join(";")}const be={fontSize:"font-size: {{VALUE}}px",fontFamily:"font-family: {{VALUE}}",fontWeight:"font-weight: {{VALUE}}",fontStyle:"font-style: {{VALUE}}",fontVariant:"font-variant: {{VALUE}}",letterSpacing:"letter-spacing: {{VALUE}}px",align:"text-align: {{VALUE}}",padding:"padding: {{VALUE}}px",whiteSpace:"white-space: {{VALUE}}",lineHeight:"line-height: {{VALUE}}px",wordWrapWidth:"max-width: {{VALUE}}px"},ye={fill:n=>`color: ${M.shared.setValue(n).toHex()}`,breakWords:n=>`word-wrap: ${n?"break-all":"break-word"}`,stroke:qe,dropShadow:Xe};function $t(n,e){for(const t in n){const r=n[t],s=[];for(const i in r)ye[i]?s.push(ye[i](r[i])):be[i]&&s.push(be[i].replace("{{VALUE}}",r[i]));e.push(`${t} { ${s.join(";")} }`)}}class ue extends W{constructor(e={}){super(e),this._cssOverrides=[],this.cssOverrides??(this.cssOverrides=e.cssOverrides),this.tagStyles=e.tagStyles??{}}set cssOverrides(e){this._cssOverrides=e instanceof Array?e:[e],this.update()}get cssOverrides(){return this._cssOverrides}_generateKey(){return this._styleKey=_t(this)+this._cssOverrides.join("-"),this._styleKey}update(){this._cssStyle=null,super.update()}clone(){return new ue({align:this.align,breakWords:this.breakWords,dropShadow:this.dropShadow?{...this.dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,cssOverrides:this.cssOverrides})}get cssStyle(){return this._cssStyle||(this._cssStyle=Vt(this)),this._cssStyle}addOverride(...e){const t=e.filter(r=>!this.cssOverrides.includes(r));t.length>0&&(this.cssOverrides.push(...t),this.update())}removeOverride(...e){const t=e.filter(r=>this.cssOverrides.includes(r));t.length>0&&(this.cssOverrides=this.cssOverrides.filter(r=>!t.includes(r)),this.update())}set fill(e){typeof e!="string"&&typeof e!="number"&&I("[HTMLTextStyle] only color fill is not supported by HTMLText"),super.fill=e}set stroke(e){e&&typeof e!="string"&&typeof e!="number"&&I("[HTMLTextStyle] only color stroke is not supported by HTMLText"),super.stroke=e}}const Te="http://www.w3.org/2000/svg",ve="http://www.w3.org/1999/xhtml";class Qe{constructor(){this.svgRoot=document.createElementNS(Te,"svg"),this.foreignObject=document.createElementNS(Te,"foreignObject"),this.domElement=document.createElementNS(ve,"div"),this.styleElement=document.createElementNS(ve,"style"),this.image=new Image;const{foreignObject:e,svgRoot:t,styleElement:r,domElement:s}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(r),e.appendChild(s)}}let we;function jt(n,e,t,r){r||(r=we||(we=new Qe));const{domElement:s,styleElement:i,svgRoot:a}=r;s.innerHTML=`<style>${e.cssStyle};</style><div style='padding:0'>${n}</div>`,s.setAttribute("style","transform-origin: top left; display: inline-block"),t&&(i.textContent=t),document.body.appendChild(a);const o=s.getBoundingClientRect();a.remove();const d=e.padding*2;return{width:o.width-d,height:o.height-d}}class Je{constructor(e,t){this.state=X.for2d(),this._graphicsBatchesHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),this.renderer.renderableGC.addManagedHash(this,"_graphicsBatchesHash")}validateRenderable(e){const t=e.context,r=!!this._graphicsBatchesHash[e.uid],s=this.renderer.graphicsContext.updateGpuContext(t);return!!(s.isBatchable||r!==s.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e.didViewUpdate&&this._rebuild(e),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._graphicsBatchesHash[e.uid];if(t)for(let r=0;r<t.length;r++){const s=t[r];s._batcher.updateElement(s)}}destroyRenderable(e){this._graphicsBatchesHash[e.uid]&&this._removeBatchForRenderable(e.uid),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const i=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const a=i.resources.localUniforms.uniforms;a.uTransformMatrix=e.groupTransform,a.uRound=t._roundPixels|e._roundPixels,Q(e.groupColorAlpha,a.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=!!this._graphicsBatchesHash[e.uid],r=this.renderer.graphicsContext.updateGpuContext(e.context);t&&this._removeBatchForRenderable(e.uid),r.isBatchable&&this._initBatchesForRenderable(e),e.batched=r.isBatchable}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,s=this._getBatchesForRenderable(e);for(let i=0;i<s.length;i++){const a=s[i];r.addToBatch(a,t)}}_getBatchesForRenderable(e){return this._graphicsBatchesHash[e.uid]||this._initBatchesForRenderable(e)}_initBatchesForRenderable(e){const t=e.context,r=this.renderer.graphicsContext.getGpuContext(t),s=this.renderer._roundPixels|e._roundPixels,i=r.batches.map(a=>{const o=v.get(bt);return a.copyTo(o),o.renderable=e,o.roundPixels=s,o});return this._graphicsBatchesHash[e.uid]===void 0&&e.on("destroyed",this._destroyRenderableBound),this._graphicsBatchesHash[e.uid]=i,i}_removeBatchForRenderable(e){this._graphicsBatchesHash[e].forEach(t=>{v.return(t)}),this._graphicsBatchesHash[e]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const e in this._graphicsBatchesHash)this._removeBatchForRenderable(e);this._graphicsBatchesHash=null}}Je.extension={type:[m.WebGLPipes,m.WebGPUPipes,m.CanvasPipes],name:"graphics"};class ce{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._textureMatrixUpdateId=-1,this._uvUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}get topology(){return this._topology||this.geometry.topology}set topology(e){this._topology=e}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}setTexture(e){this.texture!==e&&(this.texture=e,this._textureMatrixUpdateId=-1)}get uvs(){const t=this.geometry.getBuffer("aUV"),r=t.data;let s=r;const i=this.texture.textureMatrix;return i.isSimple||(s=this._transformedUvs,(this._textureMatrixUpdateId!==i._updateID||this._uvUpdateId!==t._updateID)&&((!s||s.length<r.length)&&(s=this._transformedUvs=new Float32Array(r.length)),this._textureMatrixUpdateId=i._updateID,this._uvUpdateId=t._updateID,i.multiplyUvs(r,s))),s}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}class Ze{constructor(e,t){this.localUniforms=new E({uTransformMatrix:{value:new F,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new Ue({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),e.renderableGC.addManagedHash(this,"_gpuBatchableMeshHash"),e.renderableGC.addManagedHash(this,"_meshDataHash")}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,s=e.batched;if(t.batched=s,r!==s)return!0;if(s){const i=e._geometry;if(i.indices.length!==t.indexSize||i.positions.length!==t.vertexSize)return t.indexSize=i.indices.length,t.vertexSize=i.positions.length,!0;const a=this._getBatchableMesh(e);return a.texture.uid!==e._texture.uid&&(a._textureMatrixUpdateId=-1),!a._batcher.checkAndUpdateTexture(a,e._texture)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,{batched:s}=this._getMeshData(e);if(s){const i=this._getBatchableMesh(e);i.setTexture(e._texture),i.geometry=e._geometry,r.addToBatch(i,t)}else r.break(t),t.add(e)}updateRenderable(e){if(e.batched){const t=this._gpuBatchableMeshHash[e.uid];t.setTexture(e._texture),t.geometry=e._geometry,t._batcher.updateElement(t)}}destroyRenderable(e){this._meshDataHash[e.uid]=null;const t=this._gpuBatchableMeshHash[e.uid];t&&(v.return(t),this._gpuBatchableMeshHash[e.uid]=null),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;e.state.blendMode=de(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),Q(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){return this._meshDataHash[e.uid]||this._initMeshData(e)}_initMeshData(e){var t,r;return this._meshDataHash[e.uid]={batched:e.batched,indexSize:(t=e._geometry.indices)==null?void 0:t.length,vertexSize:(r=e._geometry.positions)==null?void 0:r.length},e.on("destroyed",this._destroyRenderableBound),this._meshDataHash[e.uid]}_getBatchableMesh(e){return this._gpuBatchableMeshHash[e.uid]||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=v.get(ce);return t.renderable=e,t.setTexture(e._texture),t.transform=e.groupTransform,t.roundPixels=this.renderer._roundPixels|e._roundPixels,this._gpuBatchableMeshHash[e.uid]=t,t}destroy(){for(const e in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[e]&&v.return(this._gpuBatchableMeshHash[e]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}Ze.extension={type:[m.WebGLPipes,m.WebGPUPipes,m.CanvasPipes],name:"mesh"};class Kt{execute(e,t){const r=e.state,s=e.renderer,i=t.shader||e.defaultShader;i.resources.uTexture=t.texture._source,i.resources.uniforms=e.localUniforms;const a=s.gl,o=e.getBuffers(t);s.shader.bind(i),s.state.set(r),s.geometry.bind(o.geometry,i.glProgram);const u=o.geometry.indexBuffer.data.BYTES_PER_ELEMENT===2?a.UNSIGNED_SHORT:a.UNSIGNED_INT;a.drawElements(a.TRIANGLES,t.particleChildren.length*6,u,0)}}class Yt{execute(e,t){const r=e.renderer,s=t.shader||e.defaultShader;s.groups[0]=r.renderPipes.uniformBatch.getUniformBindGroup(e.localUniforms,!0),s.groups[1]=r.texture.getTextureBindGroup(t.texture);const i=e.state,a=e.getBuffers(t);r.encoder.draw({geometry:a.geometry,shader:t.shader||e.defaultShader,state:i,size:t.particleChildren.length*6})}}function Se(n,e=null){const t=n*6;if(t>65535?e||(e=new Uint32Array(t)):e||(e=new Uint16Array(t)),e.length!==t)throw new Error(`Out buffer length is incorrect, got ${e.length} and expected ${t}`);for(let r=0,s=0;r<t;r+=6,s+=4)e[r+0]=s+0,e[r+1]=s+1,e[r+2]=s+2,e[r+3]=s+0,e[r+4]=s+2,e[r+5]=s+3;return e}function Nt(n){return{dynamicUpdate:Ce(n,!0),staticUpdate:Ce(n,!1)}}function Ce(n,e){const t=[];t.push(`
      
        var index = 0;

        for (let i = 0; i < ps.length; ++i)
        {
            const p = ps[i];

            `);let r=0;for(const i in n){const a=n[i];if(e!==a.dynamic)continue;t.push(`offset = index + ${r}`),t.push(a.code);const o=ne(a.format);r+=o.stride/4}t.push(`
            index += stride * 4;
        }
    `),t.unshift(`
        var stride = ${r};
    `);const s=t.join(`
`);return new Function("ps","f32v","u32v",s)}class Xt{constructor(e){this._size=0,this._generateParticleUpdateCache={};const t=this._size=e.size??1e3,r=e.properties;let s=0,i=0;for(const c in r){const l=r[c],f=ne(l.format);l.dynamic?i+=f.stride:s+=f.stride}this._dynamicStride=i/4,this._staticStride=s/4,this.staticAttributeBuffer=new $(t*4*s),this.dynamicAttributeBuffer=new $(t*4*i),this.indexBuffer=Se(t);const a=new ke;let o=0,d=0;this._staticBuffer=new ge({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:j.VERTEX|j.COPY_DST}),this._dynamicBuffer=new ge({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:j.VERTEX|j.COPY_DST});for(const c in r){const l=r[c],f=ne(l.format);l.dynamic?(a.addAttribute(l.attributeName,{buffer:this._dynamicBuffer,stride:this._dynamicStride*4,offset:o*4,format:l.format}),o+=f.size):(a.addAttribute(l.attributeName,{buffer:this._staticBuffer,stride:this._staticStride*4,offset:d*4,format:l.format}),d+=f.size)}a.addIndex(this.indexBuffer);const u=this.getParticleUpdate(r);this._dynamicUpload=u.dynamicUpdate,this._staticUpload=u.staticUpdate,this.geometry=a}getParticleUpdate(e){const t=qt(e);return this._generateParticleUpdateCache[t]?this._generateParticleUpdateCache[t]:(this._generateParticleUpdateCache[t]=this.generateParticleUpdate(e),this._generateParticleUpdateCache[t])}generateParticleUpdate(e){return Nt(e)}update(e,t){e.length>this._size&&(t=!0,this._size=Math.max(e.length,this._size*1.5|0),this.staticAttributeBuffer=new $(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new $(this._size*this._dynamicStride*4*4),this.indexBuffer=Se(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const r=this.dynamicAttributeBuffer;if(this._dynamicUpload(e,r.float32View,r.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,e.length*this._dynamicStride*4,!0),t){const s=this.staticAttributeBuffer;this._staticUpload(e,s.float32View,s.uint32View),this._staticBuffer.setDataWithSize(s.float32View,e.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}function qt(n){const e=[];for(const t in n){const r=n[t];e.push(t,r.code,r.dynamic?"d":"s")}return e.join("_")}var Qt=`varying vec2 vUV;
varying vec4 vColor;

uniform sampler2D uTexture;

void main(void){
    vec4 color = texture2D(uTexture, vUV) * vColor;
    gl_FragColor = color;
}`,Jt=`attribute vec2 aVertex;
attribute vec2 aUV;
attribute vec4 aColor;

attribute vec2 aPosition;
attribute float aRotation;

uniform mat3 uTranslationMatrix;
uniform float uRound;
uniform vec2 uResolution;
uniform vec4 uColor;

varying vec2 vUV;
varying vec4 vColor;

vec2 roundPixels(vec2 position, vec2 targetSize)
{       
    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;
}

void main(void){
    float cosRotation = cos(aRotation);
    float sinRotation = sin(aRotation);
    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;
    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;

    vec2 v = vec2(x, y);
    v = v + aPosition;

    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);

    if(uRound == 1.0)
    {
        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);
    }

    vUV = aUV;
    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;
}
`,Be=`
struct ParticleUniforms {
  uProjectionMatrix:mat3x3<f32>,
  uColor:vec4<f32>,
  uResolution:vec2<f32>,
  uRoundPixels:f32,
};

@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;

@group(1) @binding(0) var uTexture: texture_2d<f32>;
@group(1) @binding(1) var uSampler : sampler;

struct VSOutput {
    @builtin(position) position: vec4<f32>,
    @location(0) uv : vec2<f32>,
    @location(1) color : vec4<f32>,
  };
@vertex
fn mainVertex(
  @location(0) aVertex: vec2<f32>,
  @location(1) aPosition: vec2<f32>,
  @location(2) aUV: vec2<f32>,
  @location(3) aColor: vec4<f32>,
  @location(4) aRotation: f32,
) -> VSOutput {
  
   let v = vec2(
       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),
       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)
   ) + aPosition;

   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);

    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;

  return VSOutput(
   position,
   aUV,
   vColor,
  );
}

@fragment
fn mainFragment(
  @location(0) uv: vec2<f32>,
  @location(1) color: vec4<f32>,
  @builtin(position) position: vec4<f32>,
) -> @location(0) vec4<f32> {

    var sample = textureSample(uTexture, uSampler, uv) * color;
   
    return sample;
}`;class Zt extends le{constructor(){const e=yt.from({vertex:Jt,fragment:Qt}),t=Tt.from({fragment:{source:Be,entryPoint:"mainFragment"},vertex:{source:Be,entryPoint:"mainVertex"}});super({glProgram:e,gpuProgram:t,resources:{uTexture:R.WHITE.source,uSampler:new vt({}),uniforms:{uTranslationMatrix:{value:new F,type:"mat3x3<f32>"},uColor:{value:new M(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class et{constructor(e,t){this.state=X.for2d(),this._gpuBufferHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.localUniforms=new E({uTranslationMatrix:{value:new F,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=e,this.adaptor=t,this.defaultShader=new Zt,this.state=X.for2d()}validateRenderable(e){return!1}addRenderable(e,t){this.renderer.renderPipes.batch.break(t),t.add(e)}getBuffers(e){return this._gpuBufferHash[e.uid]||this._initBuffer(e)}_initBuffer(e){return this._gpuBufferHash[e.uid]=new Xt({size:e.particleChildren.length,properties:e._properties}),e.on("destroyed",this._destroyRenderableBound),this._gpuBufferHash[e.uid]}updateRenderable(e){}destroyRenderable(e){this._gpuBufferHash[e.uid].destroy(),this._gpuBufferHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}execute(e){const t=e.particleChildren;if(t.length===0)return;const r=this.renderer,s=this.getBuffers(e);e.texture||(e.texture=t[0].texture);const i=this.state;s.update(t,e._childrenDirty),e._childrenDirty=!1,i.blendMode=de(e.blendMode,e.texture._source);const a=this.localUniforms.uniforms,o=a.uTranslationMatrix;e.worldTransform.copyTo(o),o.prepend(r.globalUniforms.globalUniformData.projectionMatrix),a.uResolution=r.globalUniforms.globalUniformData.resolution,a.uRound=r._roundPixels|e._roundPixels,Q(e.groupColorAlpha,a.uColor,0),this.adaptor.execute(this,e)}destroy(){this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class tt extends et{constructor(e){super(e,new Kt)}}tt.extension={type:[m.WebGLPipes],name:"particle"};class rt extends et{constructor(e){super(e,new Yt)}}rt.extension={type:[m.WebGPUPipes],name:"particle"};class st{constructor(e){this._gpuSpriteHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuSpriteHash")}addRenderable(e,t){const r=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e.didViewUpdate&&this._updateBatchableSprite(e,t),t._batcher.updateElement(t)}validateRenderable(e){const t=this._getGpuSprite(e);return!t._batcher.checkAndUpdateTexture(t,e._texture)}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];v.return(t.geometry),v.return(t),this._gpuSpriteHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_updateBatchableSprite(e,t){t.geometry.update(e),t.setTexture(e._texture)}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=v.get(ce);return t.geometry=v.get(wt),t.renderable=e,t.transform=e.groupTransform,t.texture=e._texture,t.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuSpriteHash[e.uid]=t,e.didViewUpdate||this._updateBatchableSprite(e,t),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuSpriteHash)this._gpuSpriteHash[e].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}st.extension={type:[m.WebGLPipes,m.WebGPUPipes,m.CanvasPipes],name:"nineSliceSprite"};const er={name:"tiling-bit",vertex:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`
            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;

            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;
        `},fragment:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`

            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);
            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;
            var unclamped = coord;
            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);

            var bias = 0.;

            if(unclamped.x == coord.x && unclamped.y == coord.y)
            {
                bias = -32.;
            } 

            outColor = textureSampleBias(uTexture, uSampler, coord, bias);
        `}},tr={name:"tiling-bit",vertex:{header:`
            uniform mat3 uTextureTransform;
            uniform vec4 uSizeAnchor;
        
        `,main:`
            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;

            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;
        `},fragment:{header:`
            uniform sampler2D uTexture;
            uniform mat3 uMapCoord;
            uniform vec4 uClampFrame;
            uniform vec2 uClampOffset;
        `,main:`

        vec2 coord = vUV + ceil(uClampOffset - vUV);
        coord = (uMapCoord * vec3(coord, 1.0)).xy;
        vec2 unclamped = coord;
        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);
        
        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0
    
        `}};let Z,ee;class rr extends le{constructor(){Z??(Z=Ge({name:"tiling-sprite-shader",bits:[At,er,ze]})),ee??(ee=He({name:"tiling-sprite-shader",bits:[Gt,tr,De]}));const e=new E({uMapCoord:{value:new F,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new F,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:ee,gpuProgram:Z,resources:{localUniforms:new E({uTransformMatrix:{value:new F,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:R.EMPTY.source,uSampler:R.EMPTY.source.style}})}updateUniforms(e,t,r,s,i,a){const o=this.resources.tilingUniforms,d=a.width,u=a.height,c=a.textureMatrix,l=o.uniforms.uTextureTransform;l.set(r.a*d/e,r.b*d/t,r.c*u/e,r.d*u/t,r.tx/e,r.ty/t),l.invert(),o.uniforms.uMapCoord=c.mapCoord,o.uniforms.uClampFrame=c.uClampFrame,o.uniforms.uClampOffset=c.uClampOffset,o.uniforms.uTextureTransform=l,o.uniforms.uSizeAnchor[0]=e,o.uniforms.uSizeAnchor[1]=t,o.uniforms.uSizeAnchor[2]=s,o.uniforms.uSizeAnchor[3]=i,a&&(this.resources.uTexture=a.source,this.resources.uSampler=a.source.style)}}class sr extends Oe{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}function ir(n,e){const t=n.anchor.x,r=n.anchor.y;e[0]=-t*n.width,e[1]=-r*n.height,e[2]=(1-t)*n.width,e[3]=-r*n.height,e[4]=(1-t)*n.width,e[5]=(1-r)*n.height,e[6]=-t*n.width,e[7]=(1-r)*n.height}function nr(n,e,t,r){let s=0;const i=n.length/e,a=r.a,o=r.b,d=r.c,u=r.d,c=r.tx,l=r.ty;for(t*=e;s<i;){const f=n[t],g=n[t+1];n[t]=a*f+d*g+c,n[t+1]=o*f+u*g+l,t+=e,s++}}function ar(n,e){const t=n.texture,r=t.frame.width,s=t.frame.height;let i=0,a=0;n.applyAnchorToTexture&&(i=n.anchor.x,a=n.anchor.y),e[0]=e[6]=-i,e[2]=e[4]=1-i,e[1]=e[3]=-a,e[5]=e[7]=1-a;const o=F.shared;o.copyFrom(n._tileTransform.matrix),o.tx/=n.width,o.ty/=n.height,o.invert(),o.scale(n.width/r,n.height/s),nr(e,2,0,o)}const Y=new sr;class it{constructor(e){this._state=X.default2d,this._tilingSpriteDataHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_tilingSpriteDataHash")}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const s=t.canBatch;if(s&&s===r){const{batchableMesh:i}=t;return!i._batcher.checkAndUpdateTexture(i,e.texture)}return r!==s}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const s=this._getTilingSpriteData(e),{geometry:i,canBatch:a}=s;if(a){s.batchableMesh||(s.batchableMesh=new ce);const o=s.batchableMesh;e.didViewUpdate&&(this._updateBatchableMesh(e),o.geometry=i,o.renderable=e,o.transform=e.groupTransform,o.setTexture(e._texture)),o.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(o,t)}else r.break(t),s.shader||(s.shader=new rr),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._tilingSpriteDataHash[e.uid];t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,Q(e.groupColorAlpha,r.uColor,0),this._state.blendMode=de(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:Y,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:s}=t;e.didViewUpdate&&this._updateBatchableMesh(e),s._batcher.updateElement(s)}else if(e.didViewUpdate){const{shader:s}=t;s.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}}destroyRenderable(e){var r;const t=this._getTilingSpriteData(e);t.batchableMesh=null,(r=t.shader)==null||r.destroy(),this._tilingSpriteDataHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_getTilingSpriteData(e){return this._tilingSpriteDataHash[e.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new Oe({indices:Y.indices,positions:Y.positions.slice(),uvs:Y.uvs.slice()});return this._tilingSpriteDataHash[e.uid]={canBatch:!0,renderable:e,geometry:t},e.on("destroyed",this._destroyRenderableBound),this._tilingSpriteDataHash[e.uid]}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,s=e.texture.source.style;s.addressMode!=="repeat"&&(s.addressMode="repeat",s.update()),ar(e,r.uvs),ir(e,r.positions)}destroy(){for(const e in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[e].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let s=!0;return this._renderer.type===oe.WEBGL&&(s=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(s||r.source.isPowerOfTwo),t.canBatch}}it.extension={type:[m.WebGLPipes,m.WebGPUPipes,m.CanvasPipes],name:"tilingSprite"};const or={name:"local-uniform-msdf-bit",vertex:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32,
                uRound:f32,
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
        `,main:`
            vColor *= localUniforms.uColor;
            modelMatrix *= localUniforms.uTransformMatrix;
        `,end:`
            if(localUniforms.uRound == 1)
            {
                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);
            }
        `},fragment:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
         `,main:` 
            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));
        `}},dr={name:"local-uniform-msdf-bit",vertex:{header:`
            uniform mat3 uTransformMatrix;
            uniform vec4 uColor;
            uniform float uRound;
        `,main:`
            vColor *= uColor;
            modelMatrix *= uTransformMatrix;
        `,end:`
            if(uRound == 1.)
            {
                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);
            }
        `},fragment:{header:`
            uniform float uDistance;
         `,main:` 
            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));
        `}},lr={name:"msdf-bit",fragment:{header:`
            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {
                
                // MSDF
                var median = msdfColor.r + msdfColor.g + msdfColor.b -
                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));
            
                // SDF
                median = min(median, msdfColor.a);

                var screenPxDistance = distance * (median - 0.5);
                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                // Gamma correction for coverage-like alpha
                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));
                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);
                var coverage: f32 = pow(shapeColor.a * alpha, gamma);

                return coverage;
             
            }
        `}},ur={name:"msdf-bit",fragment:{header:`
            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {
                
                // MSDF
                float median = msdfColor.r + msdfColor.g + msdfColor.b -
                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));
               
                // SDF
                median = min(median, msdfColor.a);
            
                float screenPxDistance = distance * (median - 0.5);
                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
           
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                // Gamma correction for coverage-like alpha
                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));
                float gamma = mix(1.0, 1.0 / 2.2, luma);
                float coverage = pow(shapeColor.a * alpha, gamma);  
              
                return coverage;
            }
        `}};let te,re;class cr extends le{constructor(){const e=new E({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new F,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),t=St();te??(te=Ge({name:"sdf-shader",bits:[Ct,Bt(t),or,lr,ze]})),re??(re=He({name:"sdf-shader",bits:[Pt,Rt(t),dr,ur,De]})),super({glProgram:re,gpuProgram:te,resources:{localUniforms:e,batchSamplers:Mt(t)}})}}class nt{constructor(e){this._gpuBitmapText={},this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);Pe(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){const t=this._gpuBitmapText[e].context;t.customShader&&(v.return(t.customShader),t.customShader=null),v.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);Pe(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:r}=t,s=Wt.getFont(e.text,e._style);r.clear(),s.distanceField.type!=="none"&&(r.customShader||(r.customShader=v.get(cr)));const i=Array.from(e.text),a=e._style;let o=s.baseLineOffset;const d=Ke(i,a,s,!0);let u=0;const c=a.padding,l=d.scale;let f=d.width,g=d.height+d.offsetY;a._stroke&&(f+=a._stroke.width/l,g+=a._stroke.width/l),r.translate(-e._anchor._x*f-c,-e._anchor._y*g-c).scale(l,l);const p=s.applyFillAsTint?a._fill.color:16777215;for(let h=0;h<d.lines.length;h++){const x=d.lines[h];for(let _=0;_<x.charPositions.length;_++){const w=i[u++],b=s.chars[w];b!=null&&b.texture&&r.texture(b.texture,p||"black",Math.round(x.charPositions[_]+b.xOffset),Math.round(o+b.yOffset))}o+=s.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=v.get(Ft);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",this._destroyRenderableBound),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,s=U.get(`${r}-bitmap`),{a:i,b:a,c:o,d}=e.groupTransform,u=Math.sqrt(i*i+a*a),c=Math.sqrt(o*o+d*d),l=(Math.abs(u)+Math.abs(c))/2,f=s.baseRenderedFontSize/e._style.fontSize,g=l*s.distanceField.range*(1/f);t.customShader.resources.localUniforms.uniforms.uDistance=g}destroy(){for(const e in this._gpuBitmapText)this._destroyRenderableByUid(e);this._gpuBitmapText=null,this._renderer=null}}nt.extension={type:[m.WebGLPipes,m.WebGPUPipes,m.CanvasPipes],name:"bitmapText"};function Pe(n,e){e.groupTransform=n.groupTransform,e.groupColorAlpha=n.groupColorAlpha,e.groupColor=n.groupColor,e.groupBlendMode=n.groupBlendMode,e.globalDisplayStatus=n.globalDisplayStatus,e.groupTransform=n.groupTransform,e.localDisplayStatus=n.localDisplayStatus,e.groupAlpha=n.groupAlpha,e._roundPixels=n._roundPixels}function ae(n,e){const{texture:t,bounds:r}=n;Ut(r,e._anchor,t);const s=e._style.padding;r.minX-=s,r.minY-=s,r.maxX-=s,r.maxY-=s}class at{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==r}addRenderable(e,t){const s=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(s,t)}updateRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),r._batcher.updateElement(r)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),v.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),s=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e).catch(i=>{console.error(i)}),e._didTextUpdate=!1,ae(s,e)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const r=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=r;const s=e.resolution??this._renderer.resolution,i=await this._renderer.htmlText.getManagedTexture(e.text,s,e._style,e._getKey()),a=t.batchableSprite;a.texture=t.texture=i,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate(),ae(a,e)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:R.EMPTY,currentKey:"--",batchableSprite:v.get(We),textureNeedsUploading:!1,generatingTexture:!1},r=t.batchableSprite;return r.renderable=e,r.transform=e.groupTransform,r.texture=R.EMPTY,r.bounds={minX:0,maxX:1,minY:0,maxY:0},r.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._gpuText[e.uid]=t,e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}at.extension={type:[m.WebGLPipes,m.WebGPUPipes,m.CanvasPipes],name:"htmlText"};function hr(){const{userAgent:n}=Ie.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(n)}const fr=new Ae;function ot(n,e,t,r){const s=fr;s.minX=0,s.minY=0,s.maxX=n.width/r|0,s.maxY=n.height/r|0;const i=k.getOptimalTexture(s.width,s.height,r,!1);return i.source.uploadMethodId="image",i.source.resource=n,i.source.alphaMode="premultiply-alpha-on-upload",i.frame.width=e/r,i.frame.height=t/r,i.source.emit("update",i.source),i.updateUvs(),i}function pr(n,e){const t=e.fontFamily,r=[],s={},i=/font-family:([^;"\s]+)/g,a=n.match(i);function o(d){s[d]||(r.push(d),s[d]=!0)}if(Array.isArray(t))for(let d=0;d<t.length;d++)o(t[d]);else o(t);a&&a.forEach(d=>{const u=d.split(":")[1].trim();o(u)});for(const d in e.tagStyles){const u=e.tagStyles[d].fontFamily;o(u)}return r}async function gr(n){const t=await(await Ie.get().fetch(n)).blob(),r=new FileReader;return await new Promise((i,a)=>{r.onloadend=()=>i(r.result),r.onerror=a,r.readAsDataURL(t)})}async function Re(n,e){const t=await gr(e);return`@font-face {
        font-family: "${n.fontFamily}";
        src: url('${t}');
        font-weight: ${n.fontWeight};
        font-style: ${n.fontStyle};
    }`}const N=new Map;async function mr(n,e,t){const r=n.filter(s=>U.has(`${s}-and-url`)).map((s,i)=>{if(!N.has(s)){const{url:a}=U.get(`${s}-and-url`);i===0?N.set(s,Re({fontWeight:e.fontWeight,fontStyle:e.fontStyle,fontFamily:s},a)):N.set(s,Re({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:s},a))}return N.get(s)});return(await Promise.all(r)).join(`
`)}function xr(n,e,t,r,s){const{domElement:i,styleElement:a,svgRoot:o}=s;i.innerHTML=`<style>${e.cssStyle}</style><div style='padding:0;'>${n}</div>`,i.setAttribute("style",`transform: scale(${t});transform-origin: top left; display: inline-block`),a.textContent=r;const{width:d,height:u}=s.image;return o.setAttribute("width",d.toString()),o.setAttribute("height",u.toString()),new XMLSerializer().serializeToString(o)}function _r(n,e){const t=O.getOptimalCanvasAndContext(n.width,n.height,e),{context:r}=t;return r.clearRect(0,0,n.width,n.height),r.drawImage(n,0,0),t}function br(n,e,t){return new Promise(async r=>{t&&await new Promise(s=>setTimeout(s,100)),n.onload=()=>{r()},n.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(e)}`,n.crossOrigin="anonymous"})}class he{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===oe.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,r,s){if(this._activeTextures[s])return this._increaseReferenceCount(s),this._activeTextures[s].promise;const i=this._buildTexturePromise(e,t,r).then(a=>(this._activeTextures[s].texture=a,a));return this._activeTextures[s]={texture:null,promise:i,usageCount:1},i}async _buildTexturePromise(e,t,r){const s=v.get(Qe),i=pr(e,r),a=await mr(i,r,ue.defaultTextStyle),o=jt(e,r,a,s),d=Math.ceil(Math.ceil(Math.max(1,o.width)+r.padding*2)*t),u=Math.ceil(Math.ceil(Math.max(1,o.height)+r.padding*2)*t),c=s.image,l=2;c.width=(d|0)+l,c.height=(u|0)+l;const f=xr(e,r,t,a,s);await br(c,f,hr()&&i.length>0);const g=c;let p;this._createCanvas&&(p=_r(c,t));const h=ot(p?p.canvas:g,c.width-l,c.height-l,t);return this._createCanvas&&(this._renderer.texture.initSource(h.source),O.returnCanvasAndContext(p)),v.return(s),h}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,t.usageCount===0&&(t.texture?this._cleanUp(t):t.promise.then(r=>{t.texture=r,this._cleanUp(t)}).catch(()=>{I("HTMLTextSystem: Failed to clean texture")}),this._activeTextures[e]=null))}_cleanUp(e){k.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}he.extension={type:[m.WebGLSystem,m.WebGPUSystem,m.CanvasSystem],name:"htmlText"};he.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"};class dt{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.currentKey!==r}addRenderable(e,t){const s=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(s,t)}updateRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),r._batcher.updateElement(r)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.canvasText.decreaseReferenceCount(t.currentKey),v.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),s=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e),e._didTextUpdate=!1,ae(s,e)}_updateGpuText(e){const t=this._getGpuText(e),r=t.batchableSprite;t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey),t.texture=r.texture=this._renderer.canvasText.getManagedTexture(e),t.currentKey=e._getKey(),r.texture=t.texture}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:null,currentKey:"--",batchableSprite:v.get(We)};return t.batchableSprite.renderable=e,t.batchableSprite.transform=e.groupTransform,t.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},t.batchableSprite.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._updateText(e),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}dt.extension={type:[m.WebGLPipes,m.WebGPUPipes,m.CanvasPipes],name:"text"};function Me(n,e,t){for(let r=0,s=4*t*e;r<e;++r,s+=4)if(n[s+3]!==0)return!1;return!0}function Fe(n,e,t,r,s){const i=4*e;for(let a=r,o=r*i+4*t;a<=s;++a,o+=i)if(n[o+3]!==0)return!1;return!0}function yr(n,e=1){const{width:t,height:r}=n,s=n.getContext("2d",{willReadFrequently:!0});if(s===null)throw new TypeError("Failed to get canvas 2D context");const a=s.getImageData(0,0,t,r).data;let o=0,d=0,u=t-1,c=r-1;for(;d<r&&Me(a,t,d);)++d;if(d===r)return ie.EMPTY;for(;Me(a,t,c);)--c;for(;Fe(a,t,o,d,c);)++o;for(;Fe(a,t,u,d,c);)--u;return++u,++c,new ie(o/e,d/e,(u-o)/e,(c-d)/e)}class lt{constructor(e){this._activeTextures={},this._renderer=e}getTextureSize(e,t,r){const s=z.measureText(e||" ",r);let i=Math.ceil(Math.ceil(Math.max(1,s.width)+r.padding*2)*t),a=Math.ceil(Math.ceil(Math.max(1,s.height)+r.padding*2)*t);return i=Math.ceil(i-1e-6),a=Math.ceil(a-1e-6),i=me(i),a=me(a),{width:i,height:a}}getTexture(e,t,r,s){typeof e=="string"&&(H("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:r,resolution:t}),e.style instanceof W||(e.style=new W(e.style));const{texture:i,canvasAndContext:a}=this.createTextureAndCanvas(e);return this._renderer.texture.initSource(i._source),O.returnCanvasAndContext(a),i}createTextureAndCanvas(e){const{text:t,style:r}=e,s=e.resolution??this._renderer.resolution,i=z.measureText(t||" ",r),a=Math.ceil(Math.ceil(Math.max(1,i.width)+r.padding*2)*s),o=Math.ceil(Math.ceil(Math.max(1,i.height)+r.padding*2)*s),d=O.getOptimalCanvasAndContext(a,o),{canvas:u}=d;this.renderTextToCanvas(t,r,s,d);const c=ot(u,a,o,s);if(r.trim){const l=yr(u,s);c.frame.copyFrom(l),c.updateUvs()}return{texture:c,canvasAndContext:d}}getManagedTexture(e){e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;const t=e._getKey();if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].texture;const{texture:r,canvasAndContext:s}=this.createTextureAndCanvas(e);return this._activeTextures[t]={canvasAndContext:s,texture:r,usageCount:1},r}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}returnTexture(e){const t=e.source;t.resource=null,t.uploadMethodId="unknown",t.alphaMode="no-premultiply-alpha",k.returnTexture(e)}decreaseReferenceCount(e){const t=this._activeTextures[e];t.usageCount--,t.usageCount===0&&(O.returnCanvasAndContext(t.canvasAndContext),this.returnTexture(t.texture),this._activeTextures[e]=null)}getReferenceCount(e){return this._activeTextures[e].usageCount}renderTextToCanvas(e,t,r,s){var w,b,y,B;const{canvas:i,context:a}=s,o=se(t),d=z.measureText(e||" ",t),u=d.lines,c=d.lineHeight,l=d.lineWidths,f=d.maxLineWidth,g=d.fontProperties,p=i.height;if(a.resetTransform(),a.scale(r,r),a.textBaseline=t.textBaseline,(w=t._stroke)!=null&&w.width){const C=t._stroke;a.lineWidth=C.width,a.miterLimit=C.miterLimit,a.lineJoin=C.join,a.lineCap=C.cap}a.font=o;let h,x;const _=t.dropShadow?2:1;for(let C=0;C<_;++C){const A=t.dropShadow&&C===0,P=A?Math.ceil(Math.max(1,p)+t.padding*2):0,L=P*r;if(A){a.fillStyle="black",a.strokeStyle="black";const T=t.dropShadow,J=T.color,ut=T.alpha;a.shadowColor=M.shared.setValue(J).setAlpha(ut).toRgbaString();const ct=T.blur*r,fe=T.distance*r;a.shadowBlur=ct,a.shadowOffsetX=Math.cos(T.angle)*fe,a.shadowOffsetY=Math.sin(T.angle)*fe+L}else{if(a.fillStyle=t._fill?q(t._fill,a,d):null,(b=t._stroke)!=null&&b.width){const T=t._stroke.width*t._stroke.alignment;a.strokeStyle=q(t._stroke,a,d,T)}a.shadowColor="black"}let V=(c-g.fontSize)/2;c-g.fontSize<0&&(V=0);const G=((y=t._stroke)==null?void 0:y.width)??0;for(let T=0;T<u.length;T++)h=G/2,x=G/2+T*c+g.ascent+V,t.align==="right"?h+=f-l[T]:t.align==="center"&&(h+=(f-l[T])/2),(B=t._stroke)!=null&&B.width&&this._drawLetterSpacing(u[T],t,s,h+t.padding,x+t.padding-P,!0),t._fill!==void 0&&this._drawLetterSpacing(u[T],t,s,h+t.padding,x+t.padding-P)}}_drawLetterSpacing(e,t,r,s,i,a=!1){const{context:o}=r,d=t.letterSpacing;let u=!1;if(z.experimentalLetterSpacingSupported&&(z.experimentalLetterSpacing?(o.letterSpacing=`${d}px`,o.textLetterSpacing=`${d}px`,u=!0):(o.letterSpacing="0px",o.textLetterSpacing="0px")),d===0||u){a?o.strokeText(e,s,i):o.fillText(e,s,i);return}let c=s;const l=z.graphemeSegmenter(e);let f=o.measureText(e).width,g=0;for(let p=0;p<l.length;++p){const h=l[p];a?o.strokeText(h,c,i):o.fillText(h,c,i);let x="";for(let _=p+1;_<l.length;++_)x+=l[_];g=o.measureText(x).width,c+=f-g+d,f=g}}destroy(){this._activeTextures=null}}lt.extension={type:[m.WebGLSystem,m.WebGPUSystem,m.CanvasSystem],name:"canvasText"};S.add(Ee);S.add(Le);S.add(Je);S.add(kt);S.add(Ze);S.add(tt);S.add(rt);S.add(lt);S.add(dt);S.add(nt);S.add(he);S.add(at);S.add(it);S.add(st);S.add(Ne);S.add(Ye);
